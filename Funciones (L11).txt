;------------------------------------------
; void iprint(Integer number)
; Función de impresión de enteros (itoa)
iprint:
    push    eax             ; preservar eax en la pila para restaurarlo después de que la función se ejecute
    push    ecx             ; preservar ecx en la pila para restaurarlo después de que la función se ejecute
    push    edx             ; preservar edx en la pila para restaurarlo después de que la función se ejecute
    push    esi             ; preservar esi en la pila para restaurarlo después de que la función se ejecute
    mov     ecx, 0          ; contador de cuántos bytes necesitamos imprimir al final

divideLoop:
    inc     ecx             ; contar cada byte a imprimir - número de caracteres
    mov     edx, 0          ; vaciar edx
    mov     esi, 10         ; mover 10 a esi
    idiv    esi             ; dividir eax por esi
    add     edx, 48         ; convertir edx a su representación ASCII - edx contiene el residuo después de una instrucción de división
    push    edx             ; empujar edx (representación en cadena de un entero) a la pila
    cmp     eax, 0          ; ¿Se puede dividir más el entero?
    jnz     divideLoop      ; saltar si no es cero a la etiqueta divideLoop

printLoop:
    dec     ecx             ; contar hacia atrás cada byte que pusimos en la pila
    mov     eax, esp        ; mover el puntero de la pila a eax para imprimir
    call    sprint          ; llamar a nuestra función de impresión de cadenas
    pop     eax             ; eliminar el último carácter de la pila para avanzar esp
    cmp     ecx, 0          ; ¿Hemos impreso todos los bytes que empujamos en la pila?
    jnz     printLoop       ; saltar si no es cero a la etiqueta printLoop

    pop     esi             ; restaurar esi del valor que empujamos en la pila al inicio
    pop     edx             ; restaurar edx del valor que empujamos en la pila al inicio
    pop     ecx             ; restaurar ecx del valor que empujamos en la pila al inicio
    pop     eax             ; restaurar eax del valor que empujamos en la pila al inicio
    ret

;------------------------------------------
; void iprintLF(Integer number)
; Función de impresión de enteros con salto de línea (itoa)
iprintLF:
    call    iprint          ; llamar a nuestra función de impresión de enteros

    push    eax             ; empujar eax en la pila para preservarlo mientras usamos el registro eax en esta función
    mov     eax, 0Ah        ; mover 0Ah a eax - 0Ah es el carácter ASCII para un salto de línea
    push    eax             ; empujar el salto de línea en la pila para obtener la dirección
    mov     eax, esp        ; mover la dirección del puntero actual de la pila a eax para sprint
    call    sprint          ; llamar a nuestra función sprint
    pop     eax             ; eliminar nuestro carácter de salto de línea de la pila
    pop     eax             ; restaurar el valor original de eax antes de que se llamara a nuestra función
    ret

;------------------------------------------
; int slen(String message)
; String length calculation function
slen:
    push    ebx
    mov     ebx, eax

nextchar:
    cmp     byte [eax], 0
    jz      finished
    inc     eax
    jmp     nextchar

finished:
    sub     eax, ebx
    pop     ebx
    ret

;------------------------------------------
; void sprint(String message)
; String printing function
sprint:
    push    edx
    push    ecx
    push    ebx
    push    eax
    call    slen

    mov     edx, eax
    pop     eax

    mov     ecx, eax
    mov     ebx, 1
    mov     eax, 4
    int     80h

    pop     ebx
    pop     ecx
    pop     edx
    ret


;------------------------------------------
; void sprintLF(String message)
; String printing with line feed function
sprintLF:
    call    sprint

    push    eax
    mov     eax, 0AH
    push    eax
    mov     eax, esp
    call    sprint
    pop     eax
    pop     eax
    ret

;------------------------------------------
; void exit()
; Exit program and restore resources
quit:
    mov     ebx, 0
    mov     eax, 1
    int     80h
    ret