;------------------------------------------
; int atoi(Integer number)
; Función de conversión de ASCII a entero (atoi)
atoi:
    push    ebx             ; guardar ebx en la pila para restaurarlo después de que la función termine
    push    ecx             ; guardar ecx en la pila para restaurarlo después de que la función termine
    push    edx             ; guardar edx en la pila para restaurarlo después de que la función termine
    push    esi             ; guardar esi en la pila para restaurarlo después de que la función termine
    mov     esi, eax        ; mover el puntero en eax a esi (nuestro número a convertir)
    mov     eax, 0          ; inicializar eax con el valor decimal 0
    mov     ecx, 0          ; inicializar ecx con el valor decimal 0

.multiplyLoop:
    xor     ebx, ebx        ; reiniciar ambos bytes inferior y superior de ebx a 0
    mov     bl, [esi+ecx]   ; mover un solo byte en la mitad inferior del registro ebx
    cmp     bl, 48          ; comparar el valor de la mitad inferior del registro ebx con el valor ASCII 48 (carácter '0')
    jl      .finished       ; saltar a la etiqueta 'finished' si es menor
    cmp     bl, 57          ; comparar el valor de la mitad inferior del registro ebx con el valor ASCII 57 (carácter '9')
    jg      .finished       ; saltar a la etiqueta 'finished' si es mayor

    sub     bl, 48          ; convertir la mitad inferior de ebx a su representación decimal del valor ASCII
    add     eax, ebx        ; sumar ebx a nuestro valor entero en eax
    mov     ebx, 10         ; mover el valor decimal 10 a ebx
    mul     ebx             ; multiplicar eax por ebx para obtener el valor de posición
    inc     ecx             ; incrementar ecx (nuestro registro contador)
    jmp     .multiplyLoop   ; continuar el bucle multiplyLoop

.finished:
    cmp     ecx, 0          ; comparar el valor del registro ecx con el decimal 0 (nuestro registro contador)
    je      .restore        ; saltar si es igual a 0 (no se pasaron argumentos enteros a atoi)
    mov     ebx, 10         ; mover el valor decimal 10 a ebx
    div     ebx             ; dividir eax por el valor en ebx (en este caso 10)

.restore:
    pop     esi             ; restaurar esi del valor guardado en la pila al inicio
    pop     edx             ; restaurar edx del valor guardado en la pila al inicio
    pop     ecx             ; restaurar ecx del valor guardado en la pila al inicio
    pop     ebx             ; restaurar ebx del valor guardado en la pila al inicio
    ret