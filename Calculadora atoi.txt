%include        'funciones_contatoi.asm'

SECTION .text
global  _start

_start:

    pop     ecx             ; el primer valor en la pila es el número de argumentos
    pop     edx             ; el segundo valor en la pila es el nombre del programa (descartado cuando inicializamos edx)
    sub     ecx, 1          ; disminuir ecx en 1 (número de argumentos sin contar el nombre del programa)
    mov     edx, 0          ; inicializar nuestro registro de datos para almacenar las sumas

nextArg:
    cmp     ecx, 0h         ; verificar si quedan argumentos
    jz      noMoreArgs      ; si el flag de cero está activado, saltar a la etiqueta noMoreArgs (saltando al final del bucle)
    pop     eax             ; sacar el siguiente argumento de la pila
    call    atoi            ; convertir nuestra cadena ASCII a un entero decimal
    add     edx, eax        ; realizar nuestra lógica de suma
    dec     ecx             ; disminuir ecx (número de argumentos restantes) en 1
    jmp     nextArg         ; saltar a la etiqueta nextArg

noMoreArgs:
    mov     eax, edx        ; mover nuestro resultado de datos a eax para imprimir
    call    iprintLF        ; llamar a nuestra función de impresión de enteros con salto de línea
    call    quit            ; llamar a nuestra función de salida